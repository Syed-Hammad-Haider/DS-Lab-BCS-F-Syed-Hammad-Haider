/*Task 6: Flatten a Multilevel Linked List
Each node has next and child pointers. Flatten into a single-level list.*/

#include <iostream>
using namespace std;

class Node {
    int data;
    Node* next;
    Node* child;
    Node(int val) : data(val), next(nullptr), child(nullptr) {}
};

Node* flatten(Node* head) {
    if (!head) return nullptr;
    Node* curr = head;
    while (curr) {
        if (curr->child) {
            Node* nextNode = curr->next;
            Node* child = flatten(curr->child);
            curr->next = child;
            curr->child = nullptr;
            Node* temp = child;
            while (temp->next) temp = temp->next;
            temp->next = nextNode;}
        curr = curr->next;}
    return head;}
void printList(Node* head) {
    while (head) {
        cout << head->data << " ";
        head = head->next;
    }
    cout << endl;
}

int main() {
    Node* head = new Node(1);
    head->next = new Node(2);
    head->next->next = new Node(3);
    head->next->child = new Node(4);
    head->next->child->next = new Node(5);
    head = flatten(head);
    printList(head);
}
