/*Task 5: Convert Between Linked List Types
1. Convert a singly linked list into a doubly linked list.
2. Convert a singly linked list into a circular linked list.*/

#include <iostream>
using namespace std;

class Node {
    int data;
    SNode* next;
    SNode(int val) : data(val), next(nullptr) {}
};
class DNode {
    int data;
    DNode* next;
    DNode* prev;
    DNode(int val) : data(val), next(nullptr), prev(nullptr) {}
};
DNode* toDoubly(SNode* head) {
    if (!head) return nullptr;
    DNode* dHead = new DNode(head->data);
    DNode* dCurr = dHead;
    head = head->next;
    while (head) {
        DNode* newNode = new DNode(head->data);
        dCurr->next = newNode;
        newNode->prev = dCurr;
        dCurr = newNode;
        head = head->next;}
    return dHead;
}
void toCircular(SNode* head) {
    if (!head) return;
    SNode* temp = head;
    while (temp->next) temp = temp->next;
    temp->next = head; // make circular}

int main() {
    SNode* sHead = new SNode(1);
    sHead->next = new SNode(2);
    sHead->next->next = new SNode(3);
    DNode* dHead = toDoubly(sHead);
    cout << "Doubly: ";
    for (DNode* t = dHead; t; t = t->next) cout << t->data << " ";
    cout << endl;

    toCircular(sHead);
    cout << "Circular: ";
    SNode* t = sHead;
    for (int i = 0; i < 6; i++) {
        cout << t->data << " ";
        t = t->next;
    }
    cout << endl;
}
