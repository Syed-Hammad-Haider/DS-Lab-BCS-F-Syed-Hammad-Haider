/*Task 1: Palindrome Check in Singly Linked List
 Write a program to check if a singly linked list is a palindrome.
 Input: A singly linked list of integers.
 Output: true if the list reads the same forward and backward, false otherwise.*/

#include <iostream>
#include <vector>
using namespace std;

class Node {
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {}};

class LinkedList {
private:
    Node* head;
public:
    LinkedList() : head(nullptr) {}
    void insert(int val) {
        Node* newNode = new Node(val);
        if (!head) {
            head = newNode;
            return;}
        Node* temp = head;
        while (temp->next) {
            temp = temp->next;
        }
        temp->next = newNode;}
    bool isPalindrome() {
        vector<int> values;
        Node* temp = head;
        while (temp) {
            values.push_back(temp->data);
            temp = temp->next;
}
        int i = 0, j = values.size() - 1;
        while (i < j) {
            if (values[i] != values[j]) return false;
            i++;
            j--;}
        return true;
}
};

int main() {
    LinkedList list;
    list.insert(1);
    list.insert(2);
    list.insert(3);
    list.insert(2);
    list.insert(1);

    if (list.isPalindrome())
        cout << "true" << endl;
    else
        cout << "false" << endl;}
