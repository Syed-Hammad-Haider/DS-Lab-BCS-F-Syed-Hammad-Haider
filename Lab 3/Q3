/*Task 3: Reverse in Groups of K
 Reverse nodes of a singly linked list in groups of size k.*/

#include <iostream>
using namespace std;

class Node {
    int data;
    Node* next;
    Node(int val) : data(val), next(nullptr) {}
};
Node* reverseK(Node* head, int k) {
    Node* prev = nullptr, *curr = head, *next = nullptr;
    int count = 0;
    Node* temp = head;
    for (int i = 0; i < k && temp; i++) {
        temp = temp->next;
        count++;}
    if (count < k) return head;
    count = 0;
    while (curr && count < k) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
        count++;
    }
    if (next) head->next = reverseK(next, k);
    return prev;}

void printList(Node* head) {
    while (head) {
        cout << head->data << " ";
        head = head->next;}
    cout << endl;
}
int main() {
    Node* head = new Node(1);
    head->next = new Node(2);
    head->next->next = new Node(3);
    head->next->next->next = new Node(4);
    head->next->next->next->next = new Node(5);
    head->next->next->next->next->next = new Node(6);
    head->next->next->next->next->next->next = new Node(7);
    head->next->next->next->next->next->next->next = new Node(8);
    head = reverseK(head, 3);
    printList(head);}
