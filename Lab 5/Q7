/* Task 7: Create a program that solves the N-Queens problem for any given N using backtracking. The
program should print all possible solutions for placing N queens on an N x N chessboard so
that no two queens threaten each other. This task requires you to use a recursive function to
place queens row by row , and a validation function to check if a queen can be placed in a
specific cell. If a placement leads to a conflict, the algorithm should backtrack to the previous
row and try a different column. */

#include <iostream>
using namespace std;

bool isValid(int chess[], int currRow, int currCol) {
    for(int r = 0; r < currRow; r++) {
        int placedCol = chess[r];
        if(placedCol == currCol || abs(placedCol - currCol) == abs(r - currRow))
            return false;
    }
    return true;
}

void showBoard(int chess[], int N) {
    for(int r = 0; r < N; r++) {
        for(int c = 0; c < N; c++) {
            if(chess[r] == c) cout << "Q ";
            else cout << "_ ";
        }
        cout << endl;
    }
    cout << endl;
}

void placeQueens(int chess[], int currRow, int N, int &count) {
    if(currRow == N) {
        count++;
        cout << "---------- Solution #" << count << " ----------" << endl;
        showBoard(chess, N);
        return;
    }

    for(int col = 0; col < N; col++) {
        if(isValid(chess, currRow, col)) {
            chess[currRow] = col;
            placeQueens(chess, currRow + 1, N, count);
        }
    }
}

int main() {
    int N;
    do {
        cout << "Enter the size of chessboard: ";
        cin >> N;

        if(N > 0) break;
        cout << "Please enter a positive integer for the size!" << endl;
    } while(N <= 0);

    int *chess = new int[N];
    for(int i = 0; i < N; i++) chess[i] = -1;
    int totalSolutions = 0;

    placeQueens(chess, 0, N, totalSolutions);

    if(totalSolutions == 0)
        cout << "No solutions exist for N = " << N << endl;
    else
        cout << "Total solutions for N = " << N << " : " << totalSolutions << endl;

    delete[] chess;
    return 0;
}
